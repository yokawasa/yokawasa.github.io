<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>English on Yoichi Kawasaki</title>
    <link>https://unofficialism.info/categories/english/</link>
    <description>Recent content in English on Yoichi Kawasaki</description>
    <image>
      <url>https://unofficialism.info/profile.jpg</url>
      <link>https://unofficialism.info/profile.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 06 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://unofficialism.info/categories/english/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Controlling Azure Media Services traffic with Traffic Manager</title>
      <link>https://unofficialism.info/posts/controlling-azure-media-services-traffic-with-traffic-manager/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://unofficialism.info/posts/controlling-azure-media-services-traffic-with-traffic-manager/</guid>
      <description>This is an article on how you can achieve Azure Media Services (AMS) streaming traffic distribution with Traffic Manager.
The process for a client to find target AMS streaming endpoints The figure shows how a client find target AMS streaming endpoints with Traffic Manager and requests from video players are distributed to streaming endpoints in AMS:
When AMS endpoints are added to an Azure Traffic Manager profile, Azure Traffic Manager keeps track of the status of the endpoints (running, stopped, or deleted) so that it can decide which of those endpoints should receive traffic.</description>
    </item>
    
    <item>
      <title>Logstash plugins for Microsoft Azure Services</title>
      <link>https://unofficialism.info/posts/logstash-plugins-for-azure-services/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://unofficialism.info/posts/logstash-plugins-for-azure-services/</guid>
      <description>Logstash is an open source, server-side data processing pipeline that ingests data from a multitude of sources simultaneously, transforms it, and then sends it to your favorite destinations. Here is a list of logstash plugins for Microsoft Azure Services.
   Plugin Name Target Azure Services Note     logstash-input-azureeventhub EventHub Logstash input plugin reads data from specified Azure Event Hubs   logstash-input-azureblob Blob Storage Logstash input plugin that reads and parses data from Azure Storage Blobs   logstash-input-azuretopic Service Bus Topic Logstash input plugin reads messages from Azure Service Bus Topics   logstash-input-azuretopicthreadable Service Bus Topic Logstash input plugin reads messages from Azure Service Bus Topics using multiple threads   logstash-output-applicationinsights Application Insights Logstash output plugin that store events to Application Insights   logstash-input-azurewadtable  Table Storage Logstash input plugin for Azure Diagnostics.</description>
    </item>
    
    <item>
      <title>Collecting events into Azure Functions and triggering your custom code using fluent-plugin-azurefunctions</title>
      <link>https://unofficialism.info/posts/fluent-plugin-azurefunctions/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://unofficialism.info/posts/fluent-plugin-azurefunctions/</guid>
      <description>In this article, I’d like to introduces a solution to collect events from various sources and send them into HTTP Trigger function in Azure Functions using fluent-plugin-azurefunctions. Triggers in Azure Functions are event responses used to trigger your custom code. HTTP Trigger functions allow you to respond to HTTP events sent from fluentd and cook them into whatever you want!
[note] Azure Functions is a (&amp;ldquo;serverless&amp;rdquo;) solution for easily running small pieces of code, or &amp;ldquo;functions,&amp;rdquo; in Azure.</description>
    </item>
    
    <item>
      <title>embulk plugins for Microsoft Azure Services</title>
      <link>https://unofficialism.info/posts/embulk-plugins-for-microsoft-azure-services/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://unofficialism.info/posts/embulk-plugins-for-microsoft-azure-services/</guid>
      <description>Here is a list of embulk plugins that you can leverage to transfer your data between Microsoft Azure Services and various other databases/storages/cloud services.
   Plugin Name Target Azure Services Note     embulk-output-azure_blob_storage Blob Storage Embulk output plugin that stores files onto Microsoft Azure Blob Storage   embulk-input-azure_blob_storage Blob Storage Embulk input plugin that reads files stored on Microsoft Azure Blob Storage   embulk-output-sqlserver SQL Databases, SQL DWH Embulk output plugin that Inserts or updates records to SQL server type of services like SQL DB/SQL DWH   embulk-input-sqlserver SQL Databases, SQL DWH Embulk input plugin that selects records from SQL type of services like SQL DB/SQL DWH   embulk-output-documentdb Comos DB Embulk output plugin that dumps records to Azure Cosmos DB   embulk-output-azuresearch Azure Search Embulk output plugin that dumps records to Azure Search    (as of Aug 30, 2016)</description>
    </item>
    
    <item>
      <title>fluent-plugin-documentdb supports Partitioned collections</title>
      <link>https://unofficialism.info/posts/fluent-plugin-documentdb-supports-partitioned-collections/</link>
      <pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://unofficialism.info/posts/fluent-plugin-documentdb-supports-partitioned-collections/</guid>
      <description>I’d like to announce fluent-plugin-documentdb finally supports Azure DocumentDB Partitioned collections for higher storage and throughput. If you&amp;rsquo;re not familiar with fluent-plugin-documentdb, read my previous article before move on.
Partitioned collections is kick-ass feature that I had wanted to support in fluent-plugin-documentdb since the feature came out public (see the announcement). For big fan of fluent-plugin-documentdb, sorry for keeping you waiting for such a long time :-) If I may make excuses, I would say I haven&amp;rsquo;t had as much time on the project, and I had to do ruby client implementation of Partitioned collections by myself as there is no official DocumentDB Ruby SDK that supports it (As a result I&amp;rsquo;ve created tiny Ruby DocumentDB client libraries that support the feature.</description>
    </item>
    
    <item>
      <title>Collecting logs into Azure DocumentDB using fluent-plugin-documentdb</title>
      <link>https://unofficialism.info/posts/collecting-logs-into-azure-documentdb-using-fluent-plugin-documentdb/</link>
      <pubDate>Sun, 21 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://unofficialism.info/posts/collecting-logs-into-azure-documentdb-using-fluent-plugin-documentdb/</guid>
      <description>In this article, I&amp;rsquo;d like to introduces a solution to collect logs and store them into Azure DocumentDB using fluentd and its plugin, fluent-plugin-documentdb.
Azure DocumentDB is a managed NoSQL database service provided by Microsoft Azure. It&amp;rsquo;s schemaless, natively support JSON, very easy-to-use, very fast, highly reliable, and enables rapid deployment, you name it. Fluentd is an open source data collector, which lets you unify the data collection and consumption for a better use and understanding of data.</description>
    </item>
    
    <item>
      <title>fluentd plugins for Microsoft Azure Services</title>
      <link>https://unofficialism.info/posts/fluentd-plugins-for-microsoft-azure-services/</link>
      <pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://unofficialism.info/posts/fluentd-plugins-for-microsoft-azure-services/</guid>
      <description>UPDATED:
 2016-12-10: Added fluent-plugin-azure-loganalytics to the list 2016-11-23: Added fluent-plugin-azurefunctions to the list  Here is a list of fluentd plugins for Microsoft Azure Services.
   Plugin Name Target Azure Services Note     fluent-plugin-azurestorage Blob Storage Azure Storate output plugin buffers logs in local file and upload them to Azure Storage periodicall   fluent-plugin-azureeventhubs Event Hubs Azure Event Hubs buffered output plugin for Fluentd.</description>
    </item>
    
    <item>
      <title>My patents</title>
      <link>https://unofficialism.info/posts/patents/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://unofficialism.info/posts/patents/</guid>
      <description>I&amp;rsquo;ve just noticed that some of patents, which I was involved in for its publishing process, have been granted. Good news!
 My patents list ( English translated ) My patents list ( Japanese )  </description>
    </item>
    
  </channel>
</rss>
